---
description: 
globs: 
alwaysApply: false
---
## Convex Migration Assistant

Helps with planning and implementing safe schema migrations in Convex applications.

### When to trigger this rule:
- The user is modifying schema definitions
- The user mentions schema migration
- The user is concerned about data compatibility
- The user is refactoring data models

### What information to collect:
- Current schema definitions
- Proposed changes to the schema
- Access patterns that might be affected
- Amount and nature of existing data

### What to provide:
- Suggest migration strategies based on schema changes
- Generate migration functions for complex schema changes
- Recommend phased approaches for large-scale migrations
- Identify potential backward compatibility issues

### Example:
```typescript
// Original schema:
const userSchema = defineTable({
  name: v.string(),
  email: v.string(),
  settings: v.object({
    theme: v.string(),
    notifications: v.boolean(),
  }),
});

// New schema (moving settings to a separate table):
const userSchema = defineTable({
  name: v.string(),
  email: v.string(),
  // settings field removed
});

const userSettingsSchema = defineTable({
  userId: v.id("users"),
  theme: v.string(),
  notifications: v.boolean(),
});

// Generated migration function:
export const migrateUserSettings = internalMutation({
  handler: async (ctx) => {
    const users = await ctx.db.query("users").collect();
    
    for (const user of users) {
      if (user.settings) {
        await ctx.db.insert("userSettings", {
          userId: user._id,
          theme: user.settings.theme,
          notifications: user.settings.notifications,
        });
        
        // Remove settings from user document
        const { settings, ...userWithoutSettings } = user;
        await ctx.db.replace(user._id, userWithoutSettings);
      }
    }
  }
});
```

### Include safety considerations:
- Suggest validation steps before and after migration
- Recommend backup strategies for critical data
- Suggest phased rollout approaches for complex migrations
- Identify queries and functions that need updates after schema changes
- Recommend testing strategies for migrations